const assert = require('assert');
const {
  MAX_ATTEMPTS,
  normalizeEmail,
  isValidEmail,
  isLocked,
  recordFailure,
  resetFailures,
  verifyCredentials,
  resetAllAttempts
} = require('../src/login');

// Test suite runner
function describe(suiteName, fn) {
  console.log(`\nüì¶ ${suiteName}`);
  fn();
}

function it(testName, fn) {
  try {
    fn();
    console.log(`  ‚úÖ ${testName}`);
  } catch (error) {
    console.log(`  ‚ùå ${testName}`);
    console.error(`     ${error.message}`);
    throw error;
  }
}

function beforeEach(fn) {
  fn();
}

// Run all tests
function runUnitTests() {
  describe('Login Tests', () => {
    beforeEach(() => {
      resetAllAttempts();
    });

    it('Login-04: Login‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Ñ‡∏Ñ‡∏£‡∏ö 3 ‡∏ô‡∏≤‡∏ó‡∏µ', () => {
      const email = 'test@naja.com';
      const password = 'test123';
      const normalizedEmail = normalizeEmail(email);
      
      // ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö Login-03: ‡∏•‡πá‡∏≠‡∏Ñ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÇ‡∏î‡∏¢‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° login ‡∏ú‡∏¥‡∏î‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      for (let i = 0; i <= MAX_ATTEMPTS; i++) {
        recordFailure(normalizedEmail);
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Ñ
      assert.strictEqual(isLocked(normalizedEmail), true, '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ñ‡∏ß‡∏£‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Ñ');
      
      // Mock ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏ô‡∏≤‡∏ó‡∏µ ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á lockedUntil ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
      const loginModule = require('../src/login');
      const attemptState = loginModule.attemptState || new Map();
      const entry = attemptState.get(normalizedEmail);
      
      if (entry) {
        // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πá‡∏≠‡∏Ñ‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô - 1ms = ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)
        entry.lockedUntil = Date.now() - 1;
      }
      
      // ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏£‡∏ö 3 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ
      assert.strictEqual(isLocked(normalizedEmail), false, '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏£‡∏ö 3 ‡∏ô‡∏≤‡∏ó‡∏µ');
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ login ‡∏î‡πâ‡∏ß‡∏¢ credentials ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ
      // Status 200 OK ‡πÅ‡∏•‡∏∞ message: "Login success"
      assert.strictEqual(
        verifyCredentials(normalizedEmail, password),
        true,
        '‡∏Ñ‡∏ß‡∏£ login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏î‡πâ‡∏ß‡∏¢ email ‡πÅ‡∏•‡∏∞ password ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (Status 200, message: "Login success")'
      );
    });

    it('Login-05: Login ‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', () => {
      const email = 'test@eiei.com';
      const password = 'test123';
      const normalizedEmail = normalizeEmail(email);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ email format ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      assert.strictEqual(
        isValidEmail(normalizedEmail),
        true,
        'Email format ‡∏Ñ‡∏ß‡∏£‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      );
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Ñ
      assert.strictEqual(
        isLocked(normalizedEmail),
        false,
        '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Ñ'
      );
      
      // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° login ‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
      // Status 401 Unauthorized ‡πÅ‡∏•‡∏∞ message: "Wrong password or email"
      assert.strictEqual(
        verifyCredentials(normalizedEmail, password),
        false,
        '‡∏Ñ‡∏ß‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (Status 401, message: "Wrong password or email")'
      );
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
      const nowLocked = recordFailure(normalizedEmail);
      
      // ‡∏Ñ‡∏ß‡∏£‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Ñ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
      assert.strictEqual(
        nowLocked,
        false,
        '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Ñ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å'
      );
    });
  });
}

// Run the test suite
try {
  runUnitTests();
  console.log('\n‚úÖ All unit tests passed!\n');
} catch (error) {
  console.error('\n‚ùå Unit test suite failed\n');
  process.exit(1);
}